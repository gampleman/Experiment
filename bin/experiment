#!/usr/bin/env ruby

# == Synopsis 
#   This program will run an experimental batch or generate files
# 	for a new experiment
#
# == Examples
#   Running an experiment
#     experiment --env dice experiment1 experiment2 ...
#
#   Generating a new experiment with 2 cross validations
#     experiment new experiment_name --cv 2
#
#   List all available experiments
#     experiment list
# 	
#
# == Usage 
#   experiment command [options]
#
#   For help use: experiment -h
#
# == Options
#   -h, --help          Displays help message
#   -v, --version       Display the version, then exit
#   -q, --quiet         Output as little as possible, overrides verbose
#   -V, --verbose       Verbose output
#   -e, --env           Sets the environment to run in
#                       Defaults to development
#   -c, --cv            Number of Cross validations to run
#   -m, --description   A description of the current experiment
#
# == Author
#   Jakub Hampl
#

#require "rubygems"
require 'optparse'
#require 'rdoc/usage'
require 'ostruct'
#require File.dirname(__FILE__) + "/experiment"

class App
  VERSION = '1.0'
  
  attr_reader :options

  def initialize(arguments, stdin)
    @arguments = arguments
    @stdin = stdin
    
    # Set defaults
    @options = OpenStruct.new
    @options.verbose = false
    @options.quiet = false
		@options.env = :development
		@options.cv = 5
		@options.n_classes = 10
		@options.kind = "d"
		@options.description = ""
		@options.opts = {}

  end

  # Parse options, check arguments, then process the command
  def run
        
    if parsed_options? && arguments_valid? 
      
      puts "Start at #{DateTime.now}\n\n" if @options.verbose
      
      output_options if @options.verbose # [Optional]
      require File.dirname(__FILE__) + "/vendor/backports/backports" if @options.env == :dice
      
      process_arguments            
      process_command
      
      puts "\nFinished at #{DateTime.now}" if @options.verbose
      
    else
      output_usage
    end
      
  end
  
  protected
  
    def parsed_options?
      
      # Specify options
      opts = OptionParser.new 
      opts.on('-v', '--version')    { output_version ; exit 0 }
      opts.on('-h', '--help')       { output_help }
      opts.on('-V', '--verbose')    { @options.verbose = true }  
      opts.on('-q', '--quiet')      { @options.quiet = true }
			opts.on('-e', '--env [ENV]', [:development, :dice])	{ |v| @options.env = v }
			opts.on('-c', '--cv CV', Integer)	{ |v| @options.cv = v }
      opts.on('-n', '--number NUMBER', Integer)	{ |v| @options.n_classes = v }
      opts.on('-k', '--kind KIND', String)      { |v| @options.kind = v }
      opts.on('-m', '--description M', String)      { |v| @options.description = v }
      opts.on('-o', '--options OPTSTRING', String) do |v|
        @options.opts = v
      end
      opts.parse!(@arguments) rescue return false
      
      process_options
      true      
    end

    # Performs post-parse processing on options
    def process_options
      @options.verbose = false if @options.quiet
    end
    
    def output_options
      puts "Options:\n"
      
      @options.marshal_dump.each do |name, val|        
        puts "  #{name} = #{val}"
      end
    end

    # True if required arguments were provided
    def arguments_valid?
      true if @arguments.length > 0
    end
    
    # Setup the arguments
    def process_arguments
      # TO DO - place in local vars, etc
    end
    
    def output_help
      output_version
      RDoc::usage() #exits app
    end
    
    def output_usage
      RDoc::usage('usage') # gets usage from comments above
    end
    
    def output_version
      puts "#{File.basename(__FILE__)} version #{VERSION}"
    end
    
    def process_command
			if @arguments.first == 'generate'
			  dir = "./experiments/" + @arguments[1]
				Dir.mkdir(dir)
				File.open(dir + "/" + @arguments[1] + ".rb", "w") do |req_file|
				  req_file.puts "# ## #{as_human_name @arguments[1]} ##"
				  req_file.puts "# "+@options.description.split("\n").join("\n# ")
				  req_file.puts
				  req_file.puts
				  req_file.puts "# The first contious block of comment will be included in your report."
				  req_file.puts "# This includes the reference implementation."
				  req_file.puts "# Override any desired files in this directory."
				  Dir["./app/**/*.rb"].each do |f|
				    p = f.split("/") - File.expand_path(".").split("/")
				    req_file.puts "require File.dirname(__FILE__) + \"/../../#{p.join("/")}\""
				  end
				  req_file.puts "\nclass #{as_class_name @arguments[1]} < MyExperiment\n\t\nend"
				end
				File.open(dir + "/config.yaml", "w") do |f|
				  f << "---\nexperiment:\n  development:\n  compute:\n"
        end
        
      elsif @arguments.first == "new" # generate a new project
        require 'fileutils'
        dir = "./" + @arguments[1]
        Dir.mkdir(dir)
        %w[app config experiments report results test tmp vendor].each do |d|
          Dir.mkdir(dir + "/" + d)
        end
        basedir = File.dirname(__FILE__) + "/.."
        File.open(File.join(dir, "config", "config.yaml"), "w") do |f|
          f << "---\nenvironments:\n  development:\n  compute:\n"
        end
        
        FileUtils::cp File.join(basedir, "lib/experiment/generator/readme_template.txt"), File.join(dir, "README")
        FileUtils::cp File.join(basedir, "lib/experiment/generator/Rakefile"), File.join(dir, "Rakefile")
        FileUtils::cp File.join(basedir, "lib/experiment/generator/experiment_template.rb"), File.join(dir, "experiments", "experiment.rb")
			elsif @arguments.first == "list"
			  puts "Available experiments:"
			  puts "  " + Dir["./experiments/*"].map{|a| File.basename(a) }.join(", ")
			elsif @arguments.first == "report"
			  dir = "./report/"
			  
        File.open(dir + "method.mmd", "w") do |f|
          f.puts "# Methods #"
          Dir["./experiments/*/*.rb"].each do |desc|
            if File.basename(desc) == File.basename(File.dirname(desc)) + ".rb"
              File.read(desc).split("\n").each do |line|
                if m = line.match(/^\# (.+)/)
                  f.puts m[1]
                else
                  break
                end
              end
            f.puts
            f.puts
            end
          end
        end
        
			elsif @arguments.shift == "run"
			  require File.dirname(__FILE__) + "/../lib/experiment/base"
			  require "experiments/experiment"
				@arguments.each do |exp|
				  require "./experiments/#{exp}/#{exp}"
				  cla = eval(as_class_name(exp))
					experiment = cla.new exp, @options.env
					experiment.run!(@options.cv, @options.opts)
				end
			end
      
    end
    
    def as_class_name(str)
      str.split(/[\_\-]+/).map(&:capitalize).join
    end
    
    def as_human_name(str)
      str.split(/[\_\-]+/).map(&:capitalize).join(" ")
    end

    def process_standard_input
      input = @stdin.read      
      # TO DO - process input
      
      # [Optional]
      # @stdin.each do |line| 
      #  # TO DO - process each line
      #end

    end
end


# Create and run the application
app = App.new(ARGV, STDIN)
app.run